- x - do netflix clone w/ omdbapi
- x - can first clone w/ html css js
- x - then convert repo to react
  - x - setup
    - x - babel
    - x - webpack
  - x - syntax - jsx
  - x - node - demo running simple js file
  - x - npm
  - x - libraries/packages

- make a layout
  - x - first put all html in <App/>
  - x - then separate out into components (with props)
  - then make interactive (with state, etc)
    - netflix - my list
- x - props

0. add in setup stuff more info based on notes taken for t.b. regarding css and imgs and public folder etc
1. get far w/ clone
  - x - clean up demo stuff
  - x - get icons working
    - x - use react-icons instead of fontawesome - free libs wouldn't have all icons i wanted
  - x - add profile avatar img
  - x - tooltips for nav bar
    - x - *challenge - do Browse dropdown
  - x - hover scales out and see more details
  - refactor css (b/c starts to get uglier w/ one css file)
    - css in react - explain diff ways to do it
  - arrows to flip through movie data
  - *challenge - get genres (/genre/movie/list) and render instead of genre id's
  - *challenge - scroll down and download more lists
    - biggest challenge - start now
    - next biggest - start after i show how to detect when user is at bottom
  - *challenge - auto gen what img (movie) is on big screen
2. pause and talk about benefits of react in more detail
3. more hooks
  - preface these with that useState and useEffect are pretty much all you really need, rest is either making code easier to manage or optimizing rendering
    - useRef - input for search?
    - useContext - hopefully will happen naturally
    - create own hook - hopefully will come up w/ good idea naturally
    - below probably won't happen - maybe sep into later vid
      - useReducer - can eventually refactor complex state if happens
      - useMemo - prbly wont use
      - useCallback - prbly wont use
4. react suspense and lazy loading
5. code splitting
4. routing & SPA
  - my list page
  - loaders - replace useEffect for data
  - forms/actions - first make sure i've demo'd forms, then replace w/ forms/actions
  - deferred for loading states - first make sure i've demo'd ternary loading states, then replace w/ deferred
    - https://reactrouter.com/en/main/guides/deferred
      - rather than waiting for the component before we can trigger the fetch request, we start the request for the slow data as soon as the user starts the transition to the new route. This can significantly speed up the user experience for slower networks
5. redux - at least demo
  - vs useContext
6. .env file for api key
  - don't check secret key into github
    - how to remove from github history
  - does it actually affect request in any meaningful way for hacking?

- state / lifecycle / hooks
  - https://reactjs.org/docs/hooks-reference.html
  - x - useState
    - x - first make simple counter project
    - x - then do modal for more info on main video
  - x - useEffect - data
  - useContext - data?
  - useReducer
  - useCallback
  - useMemo
  - useRef
  - custom hook
- debug chrome devtool
  - react site? - shows tree

- why react
  - virtual dom
    - vanilla js updates dom faster in general
    - but if you're rerendering big part of page, react is better b/c it can do the diff ahead of time so will update a lot of stuff at once so ux is better
  - with vanilla js you have to optimize your code to manage the dom (e.g. minimize dom traversals)
    - with react you don't have to worry about that, just tell react how you want things to look and it'll make it work for you
  - react makes it easy to couple UI with data
  - DRY - prevents repetitive code
  - code organization - easier to debug
  - easy transition to react native / flutter as well if you want to make multi-platform mobile apps (would be harder to learn swift and have to learn a lang for android as well)
  - easy to do SPA (less reqs to server)



make header background image responsive