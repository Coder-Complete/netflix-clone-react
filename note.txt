Last vids
- Finishing project
  - try to build out netflix app more 
    - my-list - favorite a movie and see it on my-list page
    - tv shows page w/ loader - find best api request in tmdb api
  - dotenv - https://www.npmjs.com/package/dotenv-webpack
  - deploy

- last notes
  - ternary loading state for data (movies)
  - suspense
    - https://www.pluralsight.com/blog/software-development/suspense-react-18-explained
    - https://blog.bitsrc.io/4-best-ways-to-use-reacts-suspense-component-17b7e7788908
  - code splitting - https://legacy.reactjs.org/docs/code-splitting.html
  - we will see useContext, custom hook, useMemo, suspense/await/defer in action when we 
  - ssr introduction

- x - do netflix clone w/ omdbapi
- x - can first clone w/ html css js
- x - then convert repo to react
  - x - setup
    - x - babel
    - x - webpack
  - x - syntax - jsx
  - x - node - demo running simple js file
  - x - npm
  - x - libraries/packages

- x - make a layout
  - x - first put all html in <App/>
  - x - then separate out into components (with props)
  - x - then make interactive (with state, etc)
    - x - netflix - my list
- x - props

0. add in setup stuff more info based on notes taken for t.b. regarding css and imgs and public folder etc
  - eslint?
  - prettier?
  - react dev tools + demo later on somewhere
1. get far w/ clone
  - x - clean up demo stuff
  - x - get icons working
    - x - use react-icons instead of fontawesome - free libs wouldn't have all icons i wanted
  - x - add profile avatar img
  - x - tooltips for nav bar
    - x - *challenge - do Browse dropdown
  - x - hover scales out and see more details
  - x - refactor css (b/c starts to get uglier w/ one css file)
    - x - css in react - explain diff ways to do it
  - x - **summary of all things react**
    - x - "i just wanted to give you a sense of react before i talked a little more about how it works"
    - x - why react (see bottom)
    - x - show react docs and how much we've covered vs not
      - x - go through important things we haven't covered (except hooks, code splitting, routing/SPA, .env)
  - x - carousel to flip through movie data
  - x - tic tac toe game
    - x - "we've learned a lot, lets practice what we know to cement it (in a completely different context) better before expanding on this project (potentially more complex things) and learning more topics"
  - x - animation for the carousel (react transition group? react spring?)
    - x - talk about npm libraries and how it's worth looking them up
    - x - mention that there are carousel libraries
  - x - challenge - scroll down and download more lists
    - x - biggest challenge - start now
    - x - next biggest - start after i show how to detect when user is at bottom
  - x - challenge - get genres (/genre/movie/list) and render instead of genre id's
2. routing & SPA
    - login page
      - *forms* - make login page (password requirements for validation)
        - for now will have to comment this out if want to work on main page
          - improve w/ router later on
        - OR DO MULTI STEP FORM PROJECT
          - updating objects & arrays in state (formFields)
        - get to an example for this somehow
        - https://beta.reactjs.org/learn/updating-objects-in-state
    - my list page
  3. deployment (best way to deploy react app w/ no backend)

Advanced react
react router
  - loaders - replace useEffect for data
  - forms/actions - first make sure i've demo'd forms, then replace w/ forms/actions
  - deferred for loading states - first make sure i've demo'd ternary loading states, then replace w/ deferred
    - https://reactrouter.com/en/main/guides/deferred
      - rather than waiting for the component before we can trigger the fetch request, we start the request for the slow data as soon as the user starts the transition to the new route. This can significantly speed up the user experience for slower networks
more hooks
  - preface these with that useState and useEffect are pretty much all you really need, rest is either making code easier to manage or optimizing rendering
    - useContext & redux
    - custom hooks
    - useMemo - prbly wont use
    - useCallback - prbly wont use
    - useReducer - can eventually refactor complex state if happens
code splitting, react suspense, and lazy loading
  - ternary loading state for data (movies)
  - suspense
    - https://www.pluralsight.com/blog/software-development/suspense-react-18-explained
    - https://blog.bitsrc.io/4-best-ways-to-use-reacts-suspense-component-17b7e7788908
  - code splitting - https://legacy.reactjs.org/docs/code-splitting.html
  - we will see useContext, custom hook, useMemo, suspense/await/defer in action when we 
  - ssr introduction


- state / lifecycle / hooks
  - https://reactjs.org/docs/hooks-reference.html
  - x - useState
    - x - first make simple counter project
    - x - then do modal for more info on main video
  - x - useEffect - data
  - x - useRef
  - useContext
  - custom hook
  - useMemo
  - useCallback
  - useReducer
- x - react dev tools

- why react
  - virtual dom
    - vanilla js updates dom faster in general
    - but if you're rerendering big part of page, react is better b/c it can do the diff ahead of time so will update a lot of stuff at once so ux is better
  - with vanilla js you have to optimize your code to manage the dom (e.g. minimize dom traversals)
    - with react you don't have to worry about that, just tell react how you want things to look and it'll make it work for you
  - react makes it easy to couple UI with data
  - DRY - prevents repetitive code
  - code organization - easier to debug
  - easy transition to react native / flutter as well if you want to make multi-platform mobile apps (would be harder to learn swift and have to learn a lang for android as well)
  - easy to do SPA (less reqs to server)
